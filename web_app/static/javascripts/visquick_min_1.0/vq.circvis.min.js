/**
    *
    *
    * @class  Represents the circular ideogram layout.  It includes all of the features of Circvis:  feature glyphs/labels,
    * ring plots, legends,  and a circular network layout.  The visualization is configured with a JSON object that specifies the data and
    * interactive effects/behaviors.
    *
    * The JSON Object passed into the {@link CircVis#draw} function as input to the visualization:
    *
    *   <pre>
    * GENOME: {
    *       DATA:{
    *           key_order : {Array} - An array of string characters denoting the keys for each ideogram ex. ['1','2','X','Y'],
    *           key_length : {Array} - An array of numbers denoting the total length of each ideogram.  The total is fitted to the
    *                  circumference of the circular plot ex. [3231323,2437865,2265741,1987347]
    *       },
    *       OPTIONS: {
    *           key_reverse_list : {Array} - Array of ideogram labels to plot in the reverse (counter-clockwise) direction.
    *              eg. ['16','17'].  Defaults to empty array,
    *           radial_grid_line_width : {Number} - Width of radial grid lines.  Default is null (no grid lines),
    *           label_layout_style : {String} - Layout style for ideogram key labels. either 'clock' or 'default'.  Default is 'default',
    *           listener : {function} - Function handler to execute on click of ideogram label,
    *           label_font_style : {String} - Ideogram label font style.  ex. '20pt helvetica bold'. Defaults to '16px helvetica, monospaced'.
    *           radial_grid_line_width : {Integer} - If defined with a numeric value, ideograms will be partitioned with radial lines having the
    *                   given width.
    *       }
    *   },
    *
    *   PLOT: {
    *       width : {Number} - total width of tool.  Defaults to 400,
    *       height : {Number} - total height of tool. Defaults to 400,
    *       container : {Element or String} - Div to render the tool onto.  Omission of this parameter causes the tool to be
    *          rendered to the document body.  The parameter may be either the HTMLElement or the string id (eg. "circvis_div"),
    *       vertical_padding : {Number} - The number of pixels to pad above and below the rendered tool.  Defaults to 0,
    *       horizontal_padding : {Number} - The number of pixels to pad to the left and right of the rendered tool.  Defaults to 0,
    *       enable_pan : {Boolean} - Enable mouse drag 'pan' behavior for entire plot. Defaults to 'false',
    *       enable_zoom : {Boolean} - Enable mouse wheel 'zoom' behavior for entire plot. Defaults to 'false',
    *       show_legend : {Boolean} - Enable display of a legend for circular plot. Defaults to 'false',
    *       legend_corner : {String} - Anchor point for legend. Either ('ne','nw','se','sw') Defaults to 'ne',
    *       legend_radius  : {Number} - Outer radius for legend circle plot.
    *   },
    *
    *   WEDGE:[   {Array} - one Ring object for each ring plot
    *       {
    *           DATA:{
    *               data_array : {Array} - An array of Circvis data nodes, ex : [ {"chr": "1", "end": 12784268, "start": 644269,
                       "value": -0.058664}]
    *           },
    *           PLOT :{
    *              type : The type to be drawn. Options are 'heatmap','histogram','scatterplot','karyotype'.  Defaults to 'histogram',
    *              height :  Radial width (in pixels) of the ring plot.  Defaults to 100,
    *
    *           },
    *           OPTIONS: {
    *               legend_label : {String} - optional string describing ring. Default is '',
    *               legend_description : {String} - Optional string to display when cursor is hovered over ring in legend.  Default is '',
    *               draw_axes : {Boolean} - Determines whether to draw axes and axes labels on a histogram or scatterplot.  Defautlts to true,
    *               outer_padding : {Integer} - Padding of outer edge of ring (in pixels), Dfault is 1,
    *               base_value : : {Number} - base value from which to plot in ring.  Optional,
    *               min_value : {Number} - minimum value to plot in ring.  Optional,
    *               max_value : {Number} - maximum value to plot in ring.  Optional,
    *               fill_style : {Function or String} - Either a function that returns a css color string or the string itself.  Default is
    *                       function(d) { return d.value >= 0 ? "rgba(20,40,200,0.6)" : "rgba(200,20,40,0.6)";} },
    *               stroke_style : {Function or String} - Either a function that returns a css color string or the string itself. Default is
    *                       function(d) {return d.value >= 0 ? "#00f" : "#f00";},
    *               shape : {Function/String} - Scatterplot glyph shape.  'triangle','diamond','cross','square','circle','tick','bar'.  Defaults to
    *                       function(d) {return 'circle';},
    *               radius : {Function/Number} - scatterplot glyph radius.  Defaults to function(d) {return 2;}
    *               listener : {Function} - the function to call on a click.  it is passed {key,{start:{Integer},end:{Integer},value:{Number}},
    *               tooltip_items: {Tooltip Object} - Defaults to {Chr:'chr',Start:'start',End:'end',Value:'value'}
    *           }
    *       }
    *
    *    ],
    *
    *    TICKS : {
    *        DATA: {
    *            data_array: {Array} - An array of Circvis data nodes where the 'value' is expected to be the label of the tick.
    *        },
    *        OPTIONS : {
    *            height : {Number},  - The radius(in pixels) of the ring containing the tick labels/feature glyphs .  Defaults to 60,
    *            listener : {Function} - A function to execute on click of a glyph.  Function is passed {key, start,end, value}
    *            fill_style: {Function or CSS Color String} - A declared CSS color or a pv.Color must be the result  Default is function(){return 'red';},
    *            display_legend: {Boolean} - Setting this to <i>true</i> will display a legend on the upper left corner mapping the tick color
    *                       to the color_keys array.
    *            legend_corner : {String} - Anchor point for legend. Either ('ne','nw','se','sw') Defaults to 'nw',
    *            outer_padding : {Number} - The distance between the tool boundary and the feature glyph ring.  Defaults to 0,
    *            overlap_distance : {Number} - Used in tiling of the feature glyphs.  The maximum distance (in base pairs) that constitutes overlapping features.  Defaults to 7000000.0
    *            label_map : {Array} - A mapping of an example feature label to a string describing that feature type.  Each element is an object.
    *                     eg. [{key:'TP53', label:'Gene'}].  Default is no mapping.
    *            tooltip_items : {Tooltip Object} - JSON object that configures the tooltip display of a feature glyph. The mapping of each property is:
    *            tooltip label : 'data_point_property'.
    *                     The data_point_property can be statically defined or be a function that operates on the data point and returns a string. Default is:
    *                     { Chr : 'chr', Start : 'start', End : 'end', Label:'value'}
    *        }
    *    },
    *
    *    NETWORK:{
    *        DATA:{
    *            data_array : {Array} - An array of Circvis network objects, which consist of 2 data nodes, a linkValue, and a linkOptions
    *        },
    *        OPTIONS: {
    *            node_listener : {Function} - function to execute on click on a node. Default is function() {return null;},
    *            link_listener : {Function{  - function to execute on click of a link. Default is function() {return null;},
    *            link_alpha : {Number or Function} - a value between (0.0,1.0) which defines the link 'alpha' for a given edge. Default is function() {return 0.7;},
    *            link_line_width : {Number or Function} - link width in units of pixels.  Default is function(node,link) { return 1; },
    *            node_fill_style : {Function or String} - Either a function that returns a css color string, the string itself, or 'ticks'.  Default is
    *                   function() { return 'blue';},
    *            link_stroke_style : {Function or String} - Either a function that returns a css color string or the string itself. Default is function() { return 'red';},
    *            tile_nodes : {Boolean} - Determines whether network nodes are 'tiled' to prevent visual occlusion by proximal features.  Defaults to 'false'.
    *            node_key : {Function} - Function that accepts a node object argument and returns the ideogram 'key' label.  Defaults to function(node) { return node['chr'];},
    *            max_node_linkdegree : {Number} - A number greater than zero which filters out all nodes with a higher linkDegree ex. 100. Defaults to 9999,
    *            min_node_linkdegree : {Number} - A number greater than zero which filters out all nodes with a lower linkDegree ex. 2. Defaults to 0,
    *            node_overlap_distance : {Number} - When tiling the graph nodes, the maximum distance (in base pairs) that constitutes overlapping tiles.  Defaults to 12000000.0
    *            node_tooltip_items : {Tooltip Object} - Defaults to { Chr : 'chr', Start : 'start', End : 'end'},
    *            link_tooltip_items : {Tooltip Object} - Defaults to { 'Node 1 Chr' : 'sourceNode.chr', 'Node 1 Start' : 'sourceNode.start', 'Node1 End' : 'sourceNode.end',
    *                     'Node 2 Chr' : 'targetNode.chr', 'Node 2 Start' : 'targetNode.start', 'Node 2 End' : 'targetNode.end'},
    *
    *        }
    *    }
    *
    *  };
    *  </pre>
    * @extends vq.Vis
    */vq.CircVis=function(){vq.Vis.call(this)},vq.CircVis.prototype=pv.extend(vq.Vis),vq.CircVis.prototype.setPanEnabled=function(a){if(!(arguments.length<1)){var b=Boolean(a);this.chromoData._plot.enable_pan=b,b?(this.event_panel.cursor("move"),this.event_panel.event("mousedown",pv.Behavior.pan())):(this.chromoData._plot.enable_zoom||this.event_panel.cursor("default"),this.event_panel.event("mousedown",null))}},vq.CircVis.prototype.setZoomEnabled=function(a){if(!(arguments.length<1)){var b=Boolean(a);this.chromoData._plot.enable_zoom=b,b?(this.event_panel.cursor("move"),this.event_panel.event("mousewheel",pv.Behavior.zoom())):(this.chromoData._plot.enable_pan||this.event_panel.cursor("default"),this.event_panel.event("mousewheel",null))}},vq.CircVis.prototype.setMaxPlotValue=function(a,b){b>this.chromoData._wedge[a]._min_plotValue&&(this.chromoData._wedge[a]._max_plotValue=b,this._render())},vq.CircVis.prototype.setMinPlotValue=function(a,b){b<this.chromoData._wedge[a]._max_plotValue&&(this.chromoData._wedge[a]._min_plotValue=b,this._render())},vq.CircVis.prototype.setMaxNodeLinkDegree=function(a){a>this.chromoData._network.min_node_linkDegree&&(this.chromoData._network.max_node_linkDegree=a,this._render())},vq.CircVis.prototype.setMinNodeLinkDegree=function(a){a<this.chromoData._network.max_node_linkDegree&&(this.chromoData._network.min_node_linkDegree=a,this._render())},vq.CircVis.prototype.setSize=function(a,b){a>1&&b>1&&b!=this.width()&&a!=this.height()&&(this.width(b),this.height(a),this._render())},vq.CircVis.prototype.selectNodeLabel=function(a){if(a=="")this.chromoData.network_panel.activeNetworkNode(null),this.chromoData.network_panel.render(),this.chromoData.tick_panel.activeTickList([]),this.chromoData.tick_panel.render();else{this.chromoData._network.selectedLabel=a;var b=this.chromoData._network.nodes_array.map(function(a){return vq.utils.VisUtils.network_node_id(a)}).filter(function(b){return b==a});b.length>0&&(this.chromoData.network_panel.activeNetworkNode(a),this.chromoData.network_panel.render());var c=this.chromoData.tick_panel.activeTickList();c.push(a),this.chromoData.tick_panel.activeTickList(c),this.chromoData.tick_panel.render()}},vq.CircVis.prototype._setOptionDefaults=function(a){a.height!=null&&this.height(a.height),a.width!=null&&this.width(a.width),a.vertical_padding!=null&&this.vertical_padding(a.vertical_padding),a.horizontal_padding!=null&&this.horizontal_padding(a.horizontal_padding),a.container&&this.container(a.container)},vq.CircVis.prototype.draw=function(a){var b=new vq.models.CircVisData(a);b.isDataReady()?(this._setOptionDefaults(b),this.chromoData=b,this._render()):console.warn("Invalid data input.  Check data for missing or improperly formatted values.")},vq.CircVis.prototype._add_ticks=function(a){var b=this.chromoData,c=a-b.ticks.outer_padding,d=c-b.ticks.height,e=function(a){return d+a.level*14},f=function(a){return e(a)+10},g=function(a,c){return b.startAngle_map[c]+b.theta[c](a.start)},h=function(a){return pv.color(b.ticks.fill_style(a))},i=function(a){return pv.color(b.ticks.stroke_style(a))},j=function(a){return a.active||b.tick_panel.activeTickList().filter(function(b){return b==a.value}).length>0};b.tick_panel=this.event_panel.add(pv.Panel).def("activeTickList",[]).fillStyle(null).data(b._chrom.keys);var k=function(a){return pv.Behavior.hovercard({include_header:!1,include_footer:!0,self_hover:!0,timeout:50,data_config:b.ticks.tooltipItems,tool_config:b.ticks.tooltipLinks}).call(this,a),a.active=1,this.render(),this.parent.children[1].render()};b.tick_panel.add(pv.Wedge).events("all").data(function(a){return b.ticks.data_map[a]}).startAngle(function(a,b){return g(a,b)}).angle(function(a){return j(a)?Math.PI/180:Math.PI/360}).innerRadius(e).outerRadius(f).event("mouseout",function(a){a.active=0,this.render(),this.parent.children[1].render()}).event("mouseover",k).event("click",function(a){b.ticks.listener(a)}).cursor("pointer").strokeStyle(function(a){return i(a).alpha(j(a)?1:.6)}).lineWidth(1).fillStyle(function(a){return h(a).alpha(j(a)?1:.6)}).anchor("inner").add(pv.Label).text(function(a){return j(a)?a.value:""}).font("14px helvetica");if(b.ticks.display_legend){var l=b.ticks.legend_corner,m=this.event_panel.add(pv.Panel).height(b.ticks.label_map.length*14).width(60).title("Tick Legend");switch(l){case"ne":m.right(0).top(0);break;case"se":m.right(0).bottom(0);break;case"sw":m.left(0).bottom(0);break;case"nw":default:m.left(0).top(0)}m.add(pv.Label).top(10).left(10).font("11px helvetica").text("Tick Legend"),m.add(pv.Bar).data(b.ticks.label_map).left(10).top(function(){return 20+15*this.index}).fillStyle(function(a){return h(a.key)}).width(36).height(12).anchor("right").add(pv.Label).text(function(a){return a.label}).font("11px helvetica").textMargin(6).textAlign("left")}},vq.CircVis.prototype._add_wedge=function(a,b){var c=this.chromoData,d,e=this.width(),f=this.height(),g=b-c._wedge[a]._outer_padding,h=g-c._wedge[a]._plot_height;this.wedge_layer[a]=this.event_panel.add(pv.Wedge).data(c._chrom.keys).left(e/2).top(f/2).innerRadius(h).outerRadius(g).angle(function(a){return c.normalizedLength[a]*2*Math.PI}).startAngle(function(a){return c.startAngle_map[a]}).fillStyle("#ddd").strokeStyle("#444").lineWidth(1).overflow("hidden").add(pv.Wedge).innerRadius(h).outerRadius(g).lineWidth(1).strokeStyle("#444");if(c._wedge[a]._plot_type!="karyotype"&&c._wedge[a]._plot_type!="tile"&&c._wedge[a]._plot_type!="band"&&c._wedge[a]._plot_type!="glyph")if(isNaN(c._wedge[a]._min_plotValue)||isNaN(c._wedge[a]._max_plotValue)){console.warn("Range of values for ring with index ("+a+") not detected.  Data has not been plotted.");return}c._wedge[a]._min_plotValue==c._wedge[a]._max_plotValue&&(c._wedge[a]._min_plotValue=c._wedge[a]._min_plotValue-1,c._wedge[a]._max_plotValue=c._wedge[a]._max_plotValue+1);var i=c._wedge[a]._base_plotValue!=null?c._wedge[a]._base_plotValue:(c._wedge[a]._min_plotValue+c._wedge[a]._max_plotValue)/2,j=pv.Scale.linear(c._wedge[a]._min_plotValue,c._wedge[a]._max_plotValue).range(h,g),k=function(a){return Math.max(j(Math.min(a,i)),h)},l=function(a){return Math.min(j(Math.max(a,i)),g)},m=function(a){return Math.min(Math.max(j(a),h),g)},n=function(a){return Math.min(Math.max(a,h),g)},o=function(a,b){return h+(b._tile_height+b._tile_padding)*a.level},p=function(a,b){return h+(b._tile_height+b._tile_padding)*a.level+b._tile_height},q=function(a,b){return(b._tile_height+b._tile_padding)*a.level+h+b._radius()*2},r=function(a,b){return c._chrom.keys.length==1?Math.min(c.startAngle_map[b]+c.theta[b](a.end||a.start+1),c.startAngle_map[c._chrom.keys[0]]+Math.PI*2):this.parent.index+1==c._chrom.keys.length?Math.min(c.startAngle_map[b]+c.theta[b](a.end||a.start+1),c.startAngle_map[c._chrom.keys[0]]+Math.PI*2):Math.min(c.startAngle_map[b]+c.theta[b](a.end||a.start+1),c.startAngle_map[c._chrom.keys[(this.parent.index+1)%c._chrom.keys.length]])},s=function(a){return c.startAngle_map[a.chr]+c.theta[a.chr](a.start)},t=function(b){return pv.Behavior.hovercard({include_header:!1,include_footer:!0,self_hover:!0,timeout:50,data_config:c._wedge[a]._tooltipItems,tool_config:c._wedge[a]._tooltipLinks}).call(this,b)},u=this.event_panel.add(pv.Panel).fillStyle(null).data(c._chrom.keys);switch(c._wedge[a]._plot_type){case"histogram":c._wedge[a]._draw_axes&&(d=this.event_panel.add(pv.Dot).data(j.ticks(4)).fillStyle(null).strokeStyle("#444").lineWidth(1).radius(function(a){return j(a)}),d.anchor("top").add(pv.Label).textBaseline("middle").textAlign("right").text(function(a){return j.tickFormat(a)}),d.anchor("bottom").add(pv.Label).textBaseline("middle").textAlign("right").text(function(a){return j.tickFormat(a)})),u.add(pv.Wedge).data(function(b){return c._wedge[a]._chr_map[b]}).startAngle(function(a,b){return c.startAngle_map[b]+c.theta[b](a.start)}).endAngle(r).innerRadius(function(a){return k(a.value)}).outerRadius(function(a){return l(a.value)}).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"scatterplot":c._wedge[a]._draw_axes&&(d=this.event_panel.add(pv.Dot).data(j.ticks(4)).fillStyle(null).strokeStyle("#444").lineWidth(1).radius(function(a){return j(a)}),d.anchor("top").add(pv.Label).textBaseline("middle").textAlign("right").text(function(a){return j.tickFormat(a)}),d.anchor("bottom").add(pv.Label).textBaseline("middle").textAlign("right").text(function(a){return j.tickFormat(a)})),u.add(pv.Dot).data(function(b){return c._wedge[a]._chr_map[b]}).left(function(a,b){return e/2+m(a.value)*Math.cos(s(a))}).bottom(function(a,b){return f/2+ -1*m(a.value)*Math.sin(s(a))}).shape(c._wedge[a]._shape).radius(c._wedge[a]._radius).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"glyph":u.add(pv.Dot).data(function(b){return c._wedge[a]._chr_map[b]}).left(function(b,d){return e/2+q(b,c._wedge[a])*Math.cos(s(b))}).bottom(function(b,d){return f/2+ -1*q(b,c._wedge[a])*Math.sin(s(b))}).shape(c._wedge[a]._shape).radius(c._wedge[a]._radius).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"band":u.add(pv.Wedge).data(function(b){return c._wedge[a]._chr_map[b]}).startAngle(function(a,b){return c.startAngle_map[b]+c.theta[b](a.start)}).endAngle(r).innerRadius(h).outerRadius(g).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"tile":u.add(pv.Wedge).data(function(b){return c._wedge[a]._chr_map[b]}).startAngle(function(a,b){return c.startAngle_map[b]+c.theta[b](a.start)}).endAngle(r).innerRadius(function(b,d){return o(b,c._wedge[a])}).outerRadius(function(b,d){return p(b,c._wedge[a])}).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"heatmap":u.add(pv.Wedge).data(function(b){return c._wedge[a]._chr_map[b]}).startAngle(function(a,b){return c.startAngle_map[b]+c.theta[b](a.start)}).endAngle(function(a,b){return this.parent.index+1==c._chrom.keys.length?c.startAngle_map[c._chrom.keys[0]]+Math.PI*2:Math.min(c.startAngle_map[b]+c.theta[b](a.end||a.start+1),c.startAngle_map[c._chrom.keys[(this.parent.index+1)%c._chrom.keys.length]])}).innerRadius(k(c._wedge[a]._min_plotValue)).outerRadius(l(c._wedge[a]._max_plotValue)).strokeStyle(c._wedge[a]._strokeStyle).fillStyle(c._wedge[a]._fillStyle).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;case"karyotype":u.add(pv.Wedge).data(function(b){return c._wedge[a]._chr_map[b]}).startAngle(function(a,b){return c.startAngle_map[b]+c.theta[b](a.start)}).endAngle(r).innerRadius(h).outerRadius(g).fillStyle(function(a){return a.value}).cursor("pointer").event("click",function(b,d){c._wedge[a].listener(b)}).event("mouseover",t);break;default:console.warn("No plot type definition detected.")}},vq.CircVis.prototype._add_network=function(){function v(b,c){a._network.link_listener(c)}function u(b){var c=a._network.links_array.filter(function(a){return a.source==b}).map(function(a){return{node:a.targetNode,linkValue:a.linkValue}}),d=a._network.links_array.filter(function(a){return a.target==b}).map(function(a){return{node:a.sourceNode,linkValue:a.linkValue}});a.network_panel.connectedToActiveNetworkNode(c.concat(d))}function t(b){return(a._network.min_node_linkDegree==null?!0:b.linkDegree>=a._network.min_node_linkDegree)&&(a._network.max_node_linkDegree==null?!0:b.linkDegree<=a._network.max_node_linkDegree)}function s(b,c){return this.parent.index==a.network_panel.activeNetworkLink()||c.source==a.network_panel.activeNetworkNode()||c.target==a.network_panel.activeNetworkNode()?k(c).darker(2).alpha(a._network.link_alpha(c)):k(c).alpha(a._network.link_alpha(c))}function q(a,b){return Math.round(Math.pow(Math.sin(Math.abs(g(b.sourceNode)-g(b.targetNode))/2),4)*100)/100}function p(a,b){return g(b.sourceNode)-g(b.targetNode)<=-1*Math.PI?"polar":g(b.sourceNode)-g(b.targetNode)>=Math.PI?"polar-reverse":g(b.sourceNode)-g(b.targetNode)>=0?"polar":"polar-reverse"}var a=this.chromoData,b=this.width(),c=this.height(),d=a._network.radius,e=function(b){return pv.Behavior.hovercard({include_header:!1,include_footer:!1,self_hover:!0,timeout:50,data_config:a._network.node_tooltipItems,tool_config:a._network.node_tooltipLinks}).call(this,b),a.network_panel.activeNetworkNode(this.index),u(this.index),a.network_panel.render()},f=function(b,c){return pv.Behavior.hovercard({include_header:!1,include_footer:!1,self_hover:!0,param_data:!0,timeout:50,data_config:a._network.link_tooltipItems,tool_config:a._network.link_tooltipLinks}).call(this,c),a.network_panel.activeNetworkLink(this.parent.index),a.network_panel.render()},g=function(b){return a.startAngle_map[b.chr]+a.theta[b.chr](b.start)},h=a._network.tile_nodes?function(a){return c/2+ -1*(d-a.level*10)*Math.sin(g(a))}:function(a){return c/2+ -1*d*Math.sin(g(a))},i=a._network.tile_nodes?function(a){return b/2+(d-a.level*10)*Math.cos(g(a))}:function(a){return b/2+d*Math.cos(g(a))},j=function(a){return g(a)+Math.PI/2},k=function(b){return pv.color(a._network.link_strokeStyle(b))},l;a._network.node_fillStyle()=="ticks"?l=function(b){return a.ticks.fill_style(b)}:l=function(b){return pv.color(a._network.node_fillStyle(b))};var m=function(b){return pv.color(a._network.node_strokeStyle(b))},n=function(b,c){return(a.network_panel.activeNetworkNode()==null||this.parent.index==a.network_panel.activeNetworkLink()||c.source==a.network_panel.activeNetworkNode()||c.target==a.network_panel.activeNetworkNode())&&(t(c.sourceNode)||t(c.targetNode))},o=function(b,c){return this.parent.index==a.network_panel.activeNetworkLink()||c.source==a.network_panel.activeNetworkNode()||c.target==a.network_panel.activeNetworkNode()?a._network.link_line_width(b,c)+1:a._network.link_line_width(b,c)},r=function(a,b){return!0};switch(a._network.node_highlightMode){case"isolate":r=n;break;case"brighten":default:}a.network_panel=this.event_panel.add(pv.Layout.Network).def("connectedToActiveNetworkNode",[]).def("activeNetworkNode",null).def("activeNetworkLink",null).nodes(a._network.nodes_array).links(a._network.links_array),a.network_panel.link.add(pv.Line).visible(r).interpolate(p).strokeStyle(s).eccentricity(q).cursor("pointer").event("mouseover",f).event("mouseout",function(){a.network_panel.activeNetworkLink(null),a.network_panel.render()}).event("click",v).lineWidth(o),a.network_panel.node.bottom(h).left(i).fillStyle(function(a,b){return l(a).alpha(.9)}).strokeStyle(function(a){return m(a).alpha(.9)}),a.network_panel.node.add(pv.Dot).shape("dot").lineWidth(1).radius(2).angle(j).event("mouseover",e).event("mouseout",function(){a.network_panel.activeNetworkNode(null),a.network_panel.connectedToActiveNetworkNode([]),a.network_panel.render()}).cursor("pointer").event("click",function(b){a._network.node_listener(b,a.network_panel.connectedToActiveNetworkNode())})},vq.CircVis.prototype._add_legend=function(){var a=this.chromoData,b=this.height(),c=this.width(),d=a._plot.legend_radius,e=d*2,f=a._plot.legend_corner,g=this.event_panel.add(pv.Panel).width(e+20).height(e+a._wedge.length*10).title("Legend"),h=g.add(pv.Panel).bottom(0).left(0).data(pv.range(0,a._wedge.length));switch(f){case"ne":g.right(0).top(0);break;case"se":g.right(0).bottom(0);break;case"sw":g.left(0).bottom(0);break;case"nw":default:g.left(0).top(0)}var i=pv.Colors.category10(0,a._wedge.length),j=d-10,k=j/a._wedge.length,l=function(a){return d-a*k},m=function(a){return Math.min(l(a)-k+2,l(a)-2)};a._plot.legend_show_rings&&h.add(pv.Wedge).outerRadius(l).innerRadius(m).title(function(b){return a._wedge[b]._legend_desc}).lineWidth(8).angle(Math.PI*2).strokeStyle(i).left(d+10).bottom(d),h.add(pv.Bar).top(function(a){return a*10}).height(10).title(function(b){return a._wedge[b]._legend_desc}).fillStyle(null).lineWidth(0).strokeStyle(null).add(pv.Label).textStyle(i).textAlign("center").font("11px helvetica").text(function(b){return a._wedge[b]._legend_label})},vq.CircVis.prototype._render=function(){var a=this.chromoData,b=this.width(),c=this.height(),d=this.container(),e=c/2,f=this.vertical_padding(),g=this.horizontal_padding();this.vis=(new pv.Panel).width(b).height(c).bottom(f).left(g).right(g).top(f).fillStyle(null).canvas(d),this.event_panel=this.vis.add(pv.Panel).events("all").data([{x:0,y:0,dx:b,dy:c}]).left(function(a){return a.x}).fillStyle(null).bottom(function(a){return a.y}),a._plot.enable_pan&&this.event_panel.event("mousedown",pv.Behavior.pan()),a._plot.enable_zoom&&this.event_panel.event("mousewheel",pv.Behavior.zoom());var h=0;a.ticks._data_array!=undefined&&(this._add_ticks(e),h=a.ticks.outer_padding+a.ticks.height),this.wedge_layer=[];if(a._wedge!=undefined)for(var i=0;i<a._wedge.length;i++){var j=e-(pv.sum(a._wedge.slice(0,i),function(a){return a._plot_height})+pv.sum(a._wedge.slice(0,i),function(a){return a._outer_padding}))-h;this._add_wedge(i,j)}var k=this.event_panel.add(pv.Wedge).data(a._chrom.keys).left(b/2).top(c/2).innerRadius(e-a._wedge[0]._outer_padding).outerRadius(e).angle(function(b){return a.normalizedLength[b]*2*Math.PI}).startAngle(function(b){return a.startAngle_map[b]}).fillStyle(null).strokeStyle(null).lineWidth(0);switch(a._chrom.label_layout_style){case"clock":var l=k.anchor("outer").add(pv.Dot).fillStyle("rgba(140,140,140,0.7)").strokeStyle("rgba(255,255,255,0.9)").lineWidth(1).radius(14);l.anchor("center").add(pv.Label).textAlign("center").font(a._chrom.label_font_style).textAngle(0),a._chrom.listener!=null&&l.events("all").cursor("pointer").event("click",function(b){a._chrom.listener(this.data())});break;case"default":default:k.anchor("center").add(pv.Label).textAlign("center").font(a._chrom.label_font_style),a._chrom.listener!=null&&k.events("all").cursor("pointer").event("click",function(b){a._chrom.listener(this.data())})}var m=e-(pv.sum(a._wedge,function(a){return a._plot_height})+pv.sum(a._wedge,function(a){return a._outer_padding})+h);if(a._chrom.radial_grid_line_width!=null&&a._chrom.radial_grid_line_width>0)var n=this.event_panel.add(pv.Wedge).data(a._chrom.keys).left(b/2).top(c/2).innerRadius(m).outerRadius(e).angle(0).startAngle(function(b){return a.startAngle_map[b]}).fillStyle(null).strokeStyle("#333").lineWidth(a._chrom.radial_grid_line_width);a._network.data!=undefined&&(a._network.radius=m-a._network._outer_padding,this._add_network()),a._plot.show_legend&&this._add_legend(),this.vis.render()},vq.models.CircVisData=function(a){vq.models.VisData.call(this,a),this.setDataModel(),this.getDataType()=="vq.models.CircVisData"?this._build_data(this.getContents()):console.warn("Unrecognized JSON object.  Expected vq.models.CircVisData object.")},vq.models.CircVisData.prototype=pv.extend(vq.models.VisData),vq.models.CircVisData.prototype.setDataModel=function(){this._dataModel=[{label:"width",id:"PLOT.width",defaultValue:400},{label:"height",id:"PLOT.height",defaultValue:400},{label:"container",id:"PLOT.container",optional:!0},{label:"vertical_padding",id:"PLOT.vertical_padding",defaultValue:0},{label:"horizontal_padding",id:"PLOT.horizontal_padding",defaultValue:0},{label:"_chrom.keys",id:"GENOME.DATA.key_order",defaultValue:["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y"]},{label:"_chrom.length",id:"GENOME.DATA.key_length",defaultValue:[]},{label:"_chrom.reverse_list",id:"GENOME.OPTIONS.key_reverse_list",optional:!0},{label:"_chrom.label_layout_style",id:"GENOME.OPTIONS.label_layout_style",defaultValue:"default"},{label:"_chrom.label_font_style",id:"GENOME.OPTIONS.label_font_style",cast:String,defaultValue:"16px helvetica, monospaced"},{label:"_chrom.radial_grid_line_width",id:"GENOME.OPTIONS.radial_grid_line_width",cast:Number,defaultValue:null},{label:"_chrom.listener",id:"GENOME.OPTIONS.listener",cast:Function,defaultValue:function(){return null}},{label:"_plot.enable_pan",id:"PLOT.enable_pan",cast:Boolean,defaultValue:!1},{label:"_plot.enable_zoom",id:"PLOT.enable_zoom",cast:Boolean,defaultValue:!1},{label:"_plot.show_legend",id:"PLOT.show_legend",cast:Boolean,defaultValue:!1},{label:"_plot.legend_corner",id:"PLOT.legend_corner",cast:String,defaultValue:"ne"},{label:"_plot.legend_radius",id:"PLOT.legend_radius",cast:Number,defaultValue:25},{label:"_plot.legend_show_rings",id:"PLOT.legend_show_rings",cast:Boolean,defaultValue:!0},{label:"_network.data",id:"NETWORK.DATA.data_array",optional:!0},{label:"_network._outer_padding",id:"NETWORK.OPTIONS.outer_padding",optional:!0},{label:"_network.node_listener",id:"NETWORK.OPTIONS.node_listener",cast:Function,defaultValue:function(){return null}},{label:"_network.link_listener",id:"NETWORK.OPTIONS.link_listener",cast:Function,defaultValue:function(){return null}},{label:"_network.link_tooltipItems",id:"NETWORK.OPTIONS.link_tooltip_items",defaultValue:{"Node 1 Chr":"sourceNode.chr","Node 1 Start":"sourceNode.start","Node1 End":"sourceNode.end","Node 2 Chr":"targetNode.chr","Node 2 Start":"targetNode.start","Node 2 End":"targetNode.end"}},{label:"_network.link_tooltipLinks",id:"NETWORK.OPTIONS.link_tooltip_links",defaultValue:{}},{label:"_network.link_line_width",id:"NETWORK.OPTIONS.link_line_width",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a,b){return 1}},{label:"_network.link_alpha",id:"NETWORK.OPTIONS.link_alpha",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return.7}},{label:"_network.link_strokeStyle",id:"NETWORK.OPTIONS.link_stroke_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return"red"}},{label:"_network.node_fillStyle",id:"NETWORK.OPTIONS.node_fill_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return"blue"}},{label:"_network.node_strokeStyle",id:"NETWORK.OPTIONS.node_stroke_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return"blue"}},{label:"_network.node_key",id:"NETWORK.OPTIONS.node_key",cast:Function,defaultValue:function(a){return a.chr}},{label:"_network.node_highlightMode",id:"NETWORK.OPTIONS.node_highlight_mode",cast:String,defaultValue:"brighten"},{label:"_network.node_tooltipFormat",id:"NETWORK.OPTIONS.node_tooltipFormat",cast:vq.utils.VisUtils.wrapProperty,defaultValue:vq.utils.VisUtils.network_node_title},{label:"_network.node_tooltipItems",id:"NETWORK.OPTIONS.node_tooltip_items",defaultValue:{Chr:"chr",Start:"start",End:"end"}},{label:"_network.node_tooltipLinks",id:"NETWORK.OPTIONS.node_tooltip_links",defaultValue:{}},{label:"_network.max_node_linkDegree",id:"NETWORK.OPTIONS.max_node_linkdegree",cast:Number,defaultValue:9999},{label:"_network.min_node_linkDegree",id
:"NETWORK.OPTIONS.min_node_linkdegree",cast:Number,defaultValue:0},{label:"_network.node_overlap_distance",id:"NETWORK.OPTIONS.node_overlap_distance",cast:Number,defaultValue:12e6},{label:"_network.tile_nodes",id:"NETWORK.OPTIONS.tile_nodes",cast:Boolean,defaultValue:!1},{label:"ticks.tooltipItems",id:"TICKS.OPTIONS.tooltip_items",defaultValue:{Chr:"chr",Start:"start",End:"end",Label:"value"}},{label:"ticks.tooltipLinks",id:"TICKS.OPTIONS.tooltip_links",defaultValue:{}},{label:"ticks.label_map",id:"TICKS.OPTIONS.label_map",defaultValue:[{key:"",label:""}]},{label:"ticks._data_array",id:"TICKS.DATA.data_array",optional:!0},{label:"ticks.height",id:"TICKS.OPTIONS.height",cast:Number,defaultValue:60},{label:"ticks.outer_padding",id:"TICKS.OPTIONS.outer_padding",cast:Number,defaultValue:0},{label:"ticks.listener",id:"TICKS.OPTIONS.listener",cast:Function,defaultValue:function(){return null}},{label:"ticks.display_legend",id:"TICKS.OPTIONS.display_legend",cast:Boolean,defaultValue:!0},{label:"ticks.legend_corner",id:"TICKS.OPTIONS.legend_corner",cast:String,defaultValue:"nw"},{label:"ticks.overlap_distance",id:"TICKS.OPTIONS.overlap_distance",cast:Number,optional:!0},{label:"ticks.fill_style",id:"TICKS.OPTIONS.fill_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return pv.color("red")}},{label:"ticks.stroke_style",id:"TICKS.OPTIONS.stroke_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(){return pv.color("white")}},{label:"_wedge",id:"WEDGE",optional:!0}]},vq.models.CircVisData.prototype._build_data=function(a){var b=a;this._processData(b),this._wedge&&(this._wedge=this._wedge.map(function(a){return new vq.models.CircVisData.WedgeData(a)})),this._setupData()},vq.models.CircVisData.prototype._setupData=function(){var a,b,c=[],d,e={},f,g=[],h={},i={},j=[],k=[],l={},m;this.normalizedLength,this.theta=[],this.startAngle_map;var n=this;if(this._chrom.keys==[]||this._chrom.length==[])console.warn("Chromosome/Ideogram information has not been detected.  Please verify that keys and length/key mappings have been passed into the GENOME.DATA object.");else{var o=this._chrom.keys;a=pv.numerate(o),c=this._chrom.length.filter(function(b){return a[b.chr_name]!=null}),c.sort(function(b,c){return a[b.chr_name]-a[c.chr_name]>0}),m=pv.sum(c,function(a){return a.chr_length}),b=pv.nest(c).key(function(a){return a.chr_name.toUpperCase()}).sortKeys(function(b,c){return a[b.chr_name]-a[c.chr_name]>0}).map(),i=pv.dict(o,function(a){return b[a.toUpperCase()][0].chr_length/m}),this.normalizedLength=i,o.forEach(function(c){e[c]=pv.sum(o.slice(0,a[c]),function(){return i[o[this.index]]*2*Math.PI}),l[c]=pv.Scale.linear(0,b[c.toUpperCase()][0].chr_length).range(0,2*Math.PI*i[c]),n._chrom.reverse_list!=undefined&&n._chrom.reverse_list.filter(function(a){return a==c}).length>0?l[c]=pv.Scale.linear(0,b[c.toUpperCase()][0].chr_length).range(2*Math.PI*i[c],0):l[c]=pv.Scale.linear(0,b[c.toUpperCase()][0].chr_length).range(0,2*Math.PI*i[c])}),h=pv.dict(o,function(a){return e[a]-Math.PI/2}),this.startAngle_map=h,this.theta=l,this._wedge!=undefined&&this._wedge.forEach(function(a,b){if(a._plot_type=="tile"||a._plot_type=="glyph"){var c=a._tile_show_all_tiles?Math.floor((a._plot_height-a._radius()*4)/(a._tile_height+a._tile_padding)):undefined;a._data=a._plot_type=="tile"?vq.utils.VisUtils.layoutChrTiles(a._data,a._tile_overlap_distance,c):vq.utils.VisUtils.layoutChrTicks(a._data,a._tile_overlap_distance,c)}d=pv.nest(a._data).key(function(a){return a.chr}).map(),a._chr_map=[],a._chr_map=pv.dict(n._chrom.keys,function(a){return d[a]===undefined?[]:d[a]});var e=a._value_label;j=pv.deviation(a._data,function(a){return a[e]}),k=pv.median(a._data,function(a){return a[e]}),a._min_plotValue=a._min_plotValue===undefined?parseFloat((-1*j+k).toFixed(2)):a._min_plotValue,a._max_plotValue=a._max_plotValue===undefined?parseFloat((j+k).toFixed(2)):a._max_plotValue,delete a._data});var p=pv.dict(this._chrom.keys,function(){return{}}),q=[],r=[],s,t,u;this._network!=undefined&&this._network.data!=undefined&&(this._network.data.forEach(function(a){t=null,u=null;if(p[a.node1.chr]!=undefined)if(p[a.node1.chr][a.node1.start]===undefined){p[a.node1.chr][a.node1.start]={};if(p[a.node1.chr][a.node1.start][a.node1.end]===undefined){var b=a.node1;b.nodeName=a.node1.chr,s=q.push(b),t=s-1,p[a.node1.chr][a.node1.start][a.node1.end]=t}else t=p[a.node1.chr][a.node1.start][a.node1.end]}else t=p[a.node1.chr][a.node1.start][a.node1.end];if(p[a.node2.chr]!=undefined)if(p[a.node2.chr][a.node2.start]===undefined){p[a.node2.chr][a.node2.start]={};if(p[a.node2.chr][a.node2.start][a.node2.end]===undefined){var b=a.node2;b.nodeName=a.node2.chr,s=q.push(b),u=s-1,p[a.node2.chr][a.node2.start][a.node2.end]=u}else u=p[a.node2.chr][a.node2.start][a.node2.end]}else u=p[a.node2.chr][a.node2.start][a.node2.end];if(t!=null&&u!=null){var c={source:t,target:u};for(var d in a)d!="node1"&&d!="node2"&&(c[d]=a[d]);r.push(c)}}),this._network.nodes_array=this._network.tile_nodes?vq.utils.VisUtils.layoutChrTiles(q,n._network.node_overlap_distance):q,this._network.links_array=r,this._network.data="loaded",p=[],q=[],r=[]);if(this.ticks!=undefined&&this.ticks._data_array!=undefined&&this.ticks._data_array!=null){if(n.ticks.overlap_distance===undefined){var v=7e6/3080419480;n.ticks.overlap_distance=v*m}var w=vq.utils.VisUtils.layoutChrTicks(n.ticks._data_array,n.ticks.overlap_distance),x=pv.nest(w).key(function(a){return a.chr}).map();this.ticks.data_map=pv.dict(n._chrom.keys,function(a){return x[a]===undefined?[]:x[a]}),this.ticks._data_array=[],delete w,x=[]}this.setDataReady(!0)}},vq.models.CircVisData.WedgeData=function(a){vq.models.VisData.call(this,{CONTENTS:a}),this.setDataModel(),this._build_data(this.getContents())},vq.models.CircVisData.WedgeData.prototype=pv.extend(vq.models.VisData),vq.models.CircVisData.WedgeData.prototype.setDataModel=function(){this._dataModel=[{label:"_data",id:"DATA.data_array",defaultValue:[{chr:"1",end:12784268,start:644269,value:-0.058664}]},{label:"listener",id:"OPTIONS.listener",defaultValue:function(a,b){}},{label:"_plot_type",id:"PLOT.type",defaultValue:"histogram"},{label:"_plot_height",id:"PLOT.height",cast:Number,defaultValue:100},{label:"_fillStyle",id:"OPTIONS.fill_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a){return pv.color("red")}},{label:"_strokeStyle",id:"OPTIONS.stroke_style",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a){return pv.color("red")}},{label:"_shape",id:"OPTIONS.shape",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a){return"circle"}},{label:"_radius",id:"OPTIONS.radius",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a){return 2}},{label:"_outer_padding",id:"OPTIONS.outer_padding",cast:Number,defaultValue:1},{label:"_min_plotValue",id:"OPTIONS.min_value",cast:Number,optional:!0},{label:"_max_plotValue",id:"OPTIONS.max_value",cast:Number,optional:!0},{label:"_value_label",id:"OPTIONS.value_label",cast:String,defaultValue:"value"},{label:"_base_plotValue",id:"OPTIONS.base_value",cast:Number,optional:!0},{label:"_legend_label",id:"OPTIONS.legend_label",cast:String,defaultValue:""},{label:"_legend_desc",id:"OPTIONS.legend_description",cast:String,defaultValue:""},{label:"_draw_axes",id:"OPTIONS.draw_axes",cast:Boolean,defaultValue:!0},{label:"_tooltipFormat",id:"OPTIONS.tooltipFormat",cast:vq.utils.VisUtils.wrapProperty,defaultValue:function(a,b){return"Chr "+b+"\nStart: "+a.start+"\nEnd: "+a.end}},{label:"_tooltipItems",id:"OPTIONS.tooltip_items",defaultValue:{Chr:"chr",Start:"start",End:"end",Value:"value"}},{label:"_tooltipLinks",id:"OPTIONS.tooltip_links",defaultValue:{}},{label:"_tile_padding",id:"OPTIONS.tile_padding",cast:Number,defaultValue:5},{label:"_tile_overlap_distance",id:"OPTIONS.tile_overlap_distance",cast:Number,defaultValue:.1},{label:"_tile_height",id:"OPTIONS.tile_height",cast:Number,defaultValue:5},{label:"_tile_show_all_tiles",id:"OPTIONS.tile_show_all_tiles",cast:Boolean,defaultValue:!1}]},vq.models.CircVisData.WedgeData.prototype._build_data=function(a){this._processData(a)}